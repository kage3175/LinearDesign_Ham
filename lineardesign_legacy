#!/usr/bin/env python3

import warnings
warnings.filterwarnings("ignore")

import argparse
import subprocess
import sys
import os
from src.forgiworks.forgi_run import further
from src.forgiworks.score import score_structure, penalties_to_test, GAP_RATIO
import multiprocessing
import glob, re, time

# region constants
#### constants
START_POS =  5# work as trim
MAX_CPU = min(os.cpu_count() - 1, 10)
NUM_SEARCH = 10
#### End of constants
# endregion
counter = None
lock = None

def getDotBracket(lines):
    dotbracket_RNA = ""
    for line in lines.split("\n"):
        if line.startswith("mRNA structure:"):
            dotbracket_RNA = line.split("mRNA structure:")[1].strip()
            break
        # End of for loop
    if not dotbracket_RNA:
        print("Error: dotbracket_RNA is empty", flush=True)
        sys.exit(1)
    return dotbracket_RNA
#### End of getDotBracket        

# parses the argvs
# return parser.parse_args()
def parse_arguments():
    parser = argparse.ArgumentParser(description='Process some flags.')
    parser.add_argument('-l', '--lambda_', type=float, default=0.0, help='set lambda')
    parser.add_argument('-v', '--verbose', action='store_true', help='print out more details')
    parser.add_argument('-c', '--codonusage', type=str, default='codon_usage_freq_table_human.csv')
    parser.add_argument('-u3', '--utr3', type=str, default='')
    parser.add_argument('-p', '--penalty', type=str, default='')
    parser.add_argument('-r', '--radial', type=str, default = "", help="Save as")
    parser.add_argument('-s', '--score', action='store_true', default="", help="Add -s to add score at the end of the result")
    # region temp
    #### Temp code, -g is temporary arg
    parser.add_argument('-g', '--gapsearch', type=int, default=0)
    #### end of temp code
    # endregion
    return parser.parse_args()
#### End of parse_arguments

# makes an arithmatic progression with given length, total 10 numbers
# return sequence
def generate_ap(length):
    a1 = length / 30
    a10 = length / 8
    n = NUM_SEARCH
    
    d = (a10 - a1) / (n - 1)
    d = 1 if d == 0 else d
    
    sequence = [round(a1 + i * d) for i in range(n)]
    
    return sequence
#### End of generate_ap

# calculates total run
def calculate_total_run(gap_list, len_rna):
    pos = START_POS
    cnt = 0
    for gap in gap_list:
        pos = START_POS
        while pos < len_rna - START_POS - gap:
            cnt+=1
            pos += (gap // 2)
    return cnt
#### End of calculate_total_run

def print_progress_bar(total_run, bar_length=100):
    global counter
    progress = counter.value / total_run
    bar_length = 30
    filled_length = int(bar_length * progress)
    bar = "■" * filled_length + " " * (bar_length - filled_length)
    sys.stdout.write(f"\r[{bar}] {progress * 100:.2f}% ({counter.value}/{total_run})")
    sys.stdout.flush()
#### End of print_progress_bar

def run_radial(i, path, lambda_, verbose_, codon_usage, utr3, input_data, tmps, len_rna, gap_list, total_run):
    pos = START_POS
    result_str = ""
    cnt = 0

    while pos < len_rna - START_POS - gap_list[i]:
        penalty = f"{pos}~{pos + gap_list[i]}"
        cmd = [
            os.path.join(path, 'bin/LinearDesign_2D_legacy'),
            lambda_,
            verbose_,
            codon_usage,
            utr3,
            penalty,
        ]
        process = subprocess.run(cmd, input=input_data, text=True, capture_output=True)
        result_str += process.stdout.rstrip() + "\n"
        dotbracket_RNA = getDotBracket(process.stdout)
        a,b,score_RNA,d,e,f = score_structure(dotbracket_RNA, "score")
        result_str += "score: " + str(score_RNA) + "\n\n"
        
        # Update shared progress counter
        with lock:
            counter.value += 1
            print_progress_bar(total_run)  # Update visual progress bar
        
        pos += (gap_list[i] // 2)
        cnt+=1
    # End of while loop
    
    with open(tmps[i], "w") as of:
        of.write(result_str)
#### End of run_radial

def extract_score(content):
    """Extracts the score from the given file content."""
    match = re.search(r'score:\s*([\d.]+)', content)
    return float(match.group(1)) if match else None  # Convert score to float

def read_and_sort_tmp_files(result_name):
    """Reads all .tmp files, extracts scores, and sorts the results."""
    tmp_files = glob.glob(f"./tmp/*{result_name}*.tmp")  # Get all .tmp files
    results = []

    for file in tmp_files:
        with open(file, "r", encoding="utf-8") as f:
            content = f.read().strip()  # Read full content, strip trailing newlines
            blocks = content.split("\n\n")  # Split into chunks (assuming double newline separation)
            
            for block in blocks:
                score = extract_score(block)
                if score is not None:
                    results.append((score, block))  # Store (score, full block)

    # Sort by score in descending order (higher score first)
    results.sort(key=lambda x: x[0], reverse=True)

    return results  # Returns a sorted list of (score, content)

def write_sorted_results(sorted_results, output_file="./result/sorted_results.txt"):
    """Writes the sorted mRNA blocks to an output file."""
    with open(output_file, "w", encoding="utf-8") as f:
        for score, content in sorted_results:
            f.write(f"{content}\n\n")  # Write full block, separate with blank line

# deletes temporary files
def delete_tmp_files(result_name, directory="./tmp"):    
    # Patterns using glob (broad search)
    files = glob.glob(f"{directory}/{result_name}_tmp*.tmp")
    
    # Regex to match only filenames ending in an integer before .tmp
    regex = re.compile(rf"^{result_name}_tmp\d+\.tmp$")

    for file in files:
        filename = os.path.basename(file)  # Extract filename only
        if regex.match(filename):  # Check if filename matches the pattern
            os.remove(file)

    # Additional patterns that don’t need integer filtering
    additional_patterns = [
        f"{directory}/radial_{result_name}_nopenalty.tmp",
        f"{directory}/tmp_log_dotbracket_score_{result_name}"
    ]
    
    for pattern in additional_patterns:
        for file in glob.glob(pattern):
            os.remove(file)
#### End of delete_tmp_files

def init_globals(shared_counter, shared_lock):
    """Initialize global shared variables in each process."""
    global counter, lock
    counter = shared_counter
    lock = shared_lock

def main():
    global counter, lock
    # 1. Read all stdin into a variable once
    input_data = sys.stdin.read()
    temp_input = input_data.split("\n")
    for s in temp_input:
        if(s[0] == ">"):
            continue
        else:
            input_data = s
            break
    cnt = 1

    args = parse_arguments()
    lambda_ = str(args.lambda_)
    verbose_ = '1' if args.verbose else '0'
    codon_usage = str(args.codonusage)
    utr3 = str(args.utr3)
    penalty = str(args.penalty)
    radial_mode = True if args.radial else False
    raidal_result_name = args.radial.strip()
    is_score = True if args.score else False
    
    # region temp
    #### Temp codes, to erase
    gapsearch = args.gapsearch
    #### End of temp code
    # endregion

    path = os.path.dirname(os.path.abspath(__file__))
    
    if radial_mode:
        result_name = raidal_result_name + str(int(time.time()))
        total_run = 0
        cmd = [
            os.path.join(path, 'bin/LinearDesign_2D_legacy'),
            lambda_,
            verbose_,
            codon_usage,
            utr3,
            "",
        ]
        output_file = "tmp/radial_" + result_name + "_nopenalty.tmp"
        dotbracket = ""
        rnaseq = ""
        with open(output_file, "w") as of:
            process = subprocess.run(cmd, input=input_data, text=True, capture_output=True)
            of.write("Penalties: None\n")
            of.write(process.stdout.rstrip() + "\n")
            dotbracket = getDotBracket(process.stdout)
            a,b,score,d,e,f = score_structure(dotbracket, "score")
            of.write("score: " + str(score) + "\n")
        #### of closed
        with open(output_file, "r") as inf:
            line = inf.readline()
            while line:
                if line.startswith("mRNA sequence:"):
                    rnaseq = line[15:].replace(" ", "").replace("\n", "")
                    break
                line = inf.readline()
        #### inf closed
        # command to run
        command = ["../LinearPartition/linearpartition", "-V", "-M"]
        
        # file
        with open("./tmp/tmp_log_dotbracket_score_" + result_name, "w") as fout:
            process = subprocess.Popen(
                command,
                stdin=subprocess.PIPE,
                stdout=fout,
                stderr=subprocess.PIPE
            )
            process.communicate(input=rnaseq.encode())
        #### subprocess done
        
        with open("./tmp/tmp_log_dotbracket_score_" + result_name, "r") as fin:
            trash = fin.readline()
            trash = fin.readline()
            dotbracket = fin.readline().replace("\n", "").replace(" ", "")
        # End of fin
        if not dotbracket:
            sys.stderr.write("Error: empty dot-bracket structure\n")
            sys.exit(1)
        len_rna = len(dotbracket)
        gap_list = generate_ap(len_rna)
        tmps = ["./tmp/" + result_name + "_tmp" + str(i) + ".tmp" for i in range(NUM_SEARCH)]
        
        total_run = calculate_total_run(gap_list, len_rna)
        counter = multiprocessing.Value("i", 0)  # Shared integer counter
        lock = multiprocessing.Lock()  # Lock for thread safety
        
        print("\nProcessing...")  # Initial message
        print_progress_bar(total_run)  # Initial empty progress bar
        
        with multiprocessing.Pool(processes=MAX_CPU, initializer=init_globals, initargs=(counter, lock)) as pool:
            pool.starmap(run_radial, [(i, path, lambda_, verbose_, codon_usage, utr3, input_data, tmps, len_rna, gap_list, total_run) for i in range(NUM_SEARCH)])
        sorted_results = read_and_sort_tmp_files(result_name)
        write_sorted_results(sorted_results, "./result/" + raidal_result_name + ".sorted")

        print("\nSorted results have been written to", "./result/" + raidal_result_name + ".sorted")
        
        delete_tmp_files(result_name)
        
        exit(0)
    
    # region gap
    elif gapsearch > 0:
        if gapsearch * 2 > len(input_data):
            # error case
            print("Too big gap")
            exit(1)
        pos = START_POS
        length_aa_seq = len(input_data.replace("\n", "").replace(" ", ""))
        cnt = 1
        while pos < length_aa_seq * 3 - START_POS - gapsearch:
            ## run lineardesign.cpp, iterate until the end
            penalty = str(pos) + "~" + str(pos + gapsearch)
            cmd = [
                os.path.join(path, 'bin/LinearDesign_2D_legacy'),
                lambda_,
                verbose_,
                codon_usage,
                utr3,
                penalty,
            ]
            process = subprocess.run(cmd, input=input_data, text=True)
            cnt+=1
            pos += (gapsearch // 2)
        exit(0)
    # endregion
        
    ## normal mode
    cmd = [
        os.path.join(path, 'bin/LinearDesign_2D_legacy'),
        lambda_,
        verbose_,
        codon_usage,
        utr3,
        penalty,
    ]

    # 2. Pass the cached data as input each time
    process = subprocess.run(cmd, input=input_data, text=True, capture_output=True)
    output = process.stdout.strip()
    dotbracket_RNA = ""
    
    dotbracket_RNA = getDotBracket(output)
    a,b,score_RNA,d,e,f = score_structure(dotbracket_RNA, "score")
    print(process.stdout.rstrip('\n'), flush=True)
    if is_score:
        print("score:", score_RNA, flush=True)
    print()
#### End of main

if __name__ == '__main__':
    main()
